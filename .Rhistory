hist(VADeaths, col = brewer.pal(3, "Set2"), main = "Set 3 Colors")
hist(VADeaths, col = brewer.pal(8, "Greens"), main = "Set 3 Colors")
VADeaths
windows()
par(bg = "White", mfrow = c(2,2))
hist(VADeaths, col ="green", main = "green plot")
hist(VADeaths, col = "red", main = "red plot")
hist(VADeaths, col = c("red","blue"), main = "red blue plot")
hist(VADeaths, col = c("blue","blue", "red"), main = "blue blue red plot")
rainbow(n, s=1, v = 1, start=0, end = max(1,heat.colors(n,alpha = 1)
terrain.colors(n,alpha = 1)
rainbow(n, s=1, v = 1, start=0, end = max(1,heat.colors(n,alpha = 1)))
#install.packages("plotrix")
library(plotrix)
pie3D(x=table(iris$Species), labels = levels(iris$Species), col = c("red", "green", "blue"))
pie3D(x=table(iris$Species), labels = levels(iris$Species), col = c("red", "green", "blue"), explode= 0.1)
par(mfrow = c(1,2))
plot(mtcars$cyl, mtcars$wt, main = "Cyl vs. Weight", xlab = "Cyl", ylab = "Weight")
plot(mtcars$cyl, mtcars$wt, main = "Cyl vs. MPG", xlab = "Cyl", ylab = "Miles per Gallon")
par(mfrow = c(1,1))
par(bg = "light blue")
hist(iris$Sepal.Width)
hist(iris$Sepal.Width, col = "red")
VADeaths
windows()
par(bg = "White", mfrow = c(2,2))
hist(VADeaths, col = heat.colors(n=2), main = "col=heat.colors")
hist(VADeaths, col = terrain.colors(n=2), main = "col=terrain.colors")
hist(VADeaths, col = rainbow(n=5), main = "col=rainbow")
hist(VADeaths, col = cm.colors(n=4), main = "col=cm.colors")
VADeaths
windows()
par(bg = "White", mfrow = c(2,2))
hist(VADeaths, col ="green", main = "green plot")
hist(VADeaths, col = "red", main = "red plot")
hist(VADeaths, col = c("red","blue"), main = "red blue plot")
hist(VADeaths, col = c("blue","blue", "red"), main = "blue blue red plot")
#rainbow(n, s=1, v = 1, start=0, end = max(1,heat.colors(n,alpha = 1)))
#terrain.colors(n,alpha = 1)
#topo.colors(n, alpha = 1)
#cm.colors(n, alpha = 1)
data()
#install.packages("RColorBrewer")
library(RColorBrewer)
window()
par(bg= "white", mfrow= c(2,2))
hist(VADeaths, col = brewer.pal(3, "Set3"), main = "Set 3 Colors")
hist(VADeaths, col = brewer.pal(3, "Set1"), main = "Set 3 Colors")
hist(VADeaths, col = brewer.pal(3, "Set2"), main = "Set 3 Colors")
hist(VADeaths, col = brewer.pal(8, "Greens"), main = "Set 3 Colors")
install.packages("plotrix")
library(plotrix)
pie3D(x=table(iris$Species), labels = levels(iris$Species), col = c("red", "green", "blue"))
pie3D(x=table(iris$Species), labels = levels(iris$Species), col = c("red", "green", "blue"), explode= 0.1)
par(mfrow = c(1,2))
plot(mtcars$cyl, mtcars$wt, main = "Cyl vs. Weight", xlab = "Cyl", ylab = "Weight")
plot(mtcars$cyl, mtcars$wt, main = "Cyl vs. MPG", xlab = "Cyl", ylab = "Miles per Gallon")
par(mfrow = c(1,1))
par(bg = "light blue")
hist(iris$Sepal.Width)
hist(iris$Sepal.Width, col = "red")
VADeaths
windows()
par(bg = "White", mfrow = c(2,2))
hist(VADeaths, col = heat.colors(n=2), main = "col=heat.colors")
hist(VADeaths, col = terrain.colors(n=2), main = "col=terrain.colors")
hist(VADeaths, col = rainbow(n=5), main = "col=rainbow")
hist(VADeaths, col = cm.colors(n=4), main = "col=cm.colors")
VADeaths
windows()
par(bg = "White", mfrow = c(2,2))
hist(VADeaths, col ="green", main = "green plot")
hist(VADeaths, col = "red", main = "red plot")
hist(VADeaths, col = c("red","blue"), main = "red blue plot")
hist(VADeaths, col = c("blue","blue", "red"), main = "blue blue red plot")
rainbow(n, s=1, v = 1, start=0, end = max(1,heat.colors(n,alpha = 1)))
terrain.colors(n,alpha = 1)
topo.colors(n, alpha = 1)
cm.colors(n, alpha = 1)
data()
install.packages("RColorBrewer")
library(RColorBrewer)
window()
par(bg= "white", mfrow= c(2,2))
hist(VADeaths, col = brewer.pal(3, "Set3"), main = "Set 3 Colors")
hist(VADeaths, col = brewer.pal(3, "Set1"), main = "Set 3 Colors")
hist(VADeaths, col = brewer.pal(3, "Set2"), main = "Set 3 Colors")
hist(VADeaths, col = brewer.pal(8, "Greens"), main = "Greens 8 Colors")
display.brewer.all()
install.packages("hexbin")
library(hexbin)
window()
plot(hexbin(iris$Petal.Length, iris$Sepal.Length), xlab = "Petal Length", ylab = "Sepal Length")
plot(iris$Petal.Length, iris$Sepal.Length)
install.packages("vcd")
install.packages("plotrix")
install.packages("plotrix")
library(plotrix)
pie3D(x=table(iris$Species), labels = levels(iris$Species), col = c("red", "green", "blue"))
pie3D(x=table(iris$Species), labels = levels(iris$Species), col = c("red", "green", "blue"), explode= 0.1)
par(mfrow = c(1,2))
plot(mtcars$cyl, mtcars$wt, main = "Cyl vs. Weight", xlab = "Cyl", ylab = "Weight")
plot(mtcars$cyl, mtcars$wt, main = "Cyl vs. MPG", xlab = "Cyl", ylab = "Miles per Gallon")
par(mfrow = c(1,1))
par(bg = "light blue")
hist(iris$Sepal.Width)
hist(iris$Sepal.Width, col = "red")
VADeaths
windows()
par(bg = "White", mfrow = c(2,2))
hist(VADeaths, col = heat.colors(n=2), main = "col=heat.colors")
hist(VADeaths, col = terrain.colors(n=2), main = "col=terrain.colors")
hist(VADeaths, col = rainbow(n=5), main = "col=rainbow")
hist(VADeaths, col = cm.colors(n=4), main = "col=cm.colors")
VADeaths
windows()
par(bg = "White", mfrow = c(2,2))
hist(VADeaths, col ="green", main = "green plot")
hist(VADeaths, col = "red", main = "red plot")
hist(VADeaths, col = c("red","blue"), main = "red blue plot")
hist(VADeaths, col = c("blue","blue", "red"), main = "blue blue red plot")
rainbow(n, s=1, v = 1, start=0, end = max(1,heat.colors(n,alpha = 1)))
terrain.colors(n,alpha = 1)
topo.colors(n, alpha = 1)
cm.colors(n, alpha = 1)
data()
install.packages("RColorBrewer")
library(RColorBrewer)
window()
par(bg= "white", mfrow= c(2,2))
hist(VADeaths, col = brewer.pal(3, "Set3"), main = "Set 3 Colors")
hist(VADeaths, col = brewer.pal(3, "Set1"), main = "Set 3 Colors")
hist(VADeaths, col = brewer.pal(3, "Set2"), main = "Set 3 Colors")
hist(VADeaths, col = brewer.pal(8, "Greens"), main = "Greens 8 Colors")
display.brewer.all()
install.packages("hexbin")
library(hexbin)
window()
plot(hexbin(iris$Petal.Length, iris$Sepal.Length), xlab = "Petal Length", ylab = "Sepal Length")
plot(iris$Petal.Length, iris$Sepal.Length)
install.packages("vcd")
library(vcd)
window()
mosaic(HairEyeColor)
HairEyeColor
heatmap(as.matrix(mtcars))
View(mtcars)
install.packages("tabplot")
library(tabplot)
window()
tableplot(dat = iris, numMode = "mb", pals = list(rainbow(n=3)))
tableplot(dat = iris, numMode = "mb", pals = list(c("green", "blue","pink")))
tableplot(dat = iris, sortCol= Sepal.Width,numMode = "mb", pals = list(rainbow(n=3)))
install.packages("ggplot2")
library(ggplot2)
data(diamonds)
library(tabplot)
window()
tableplot(diamonds, sortCol = price, numMode = "mb")
tableplot(dat = iris, sortCol = Sepal.Width, numMode = "mb", pals = list(rainbow(n=3)))
install.packages("ggplot2")
library(ggplot2)
data(diamonds)
library(tabplot)
window()
tableplot(diamonds, sortCol = price, numMode = "mb")
mpg_boxplot= boxplot(mtcars$mpg, main="Cars Mileage Data", ylab= "Miles per Gallon")
t=c(-100,1,2,3,4,5,6,7,8,9,155)
boxplot(t)
mpg_boxplot$stats
install.packages("ggplot2")
#install.packages("plotrix")
library(plotrix)
pie3D(x=table(iris$Species), labels = levels(iris$Species), col = c("red", "green", "blue"))
pie3D(x=table(iris$Species), labels = levels(iris$Species), col = c("red", "green", "blue"), explode= 0.1)
par(mfrow = c(1,2))
plot(mtcars$cyl, mtcars$wt, main = "Cyl vs. Weight", xlab = "Cyl", ylab = "Weight")
plot(mtcars$cyl, mtcars$wt, main = "Cyl vs. MPG", xlab = "Cyl", ylab = "Miles per Gallon")
par(mfrow = c(1,1))
par(bg = "light blue")
hist(iris$Sepal.Width)
hist(iris$Sepal.Width, col = "red")
VADeaths
windows()
par(bg = "White", mfrow = c(2,2))
hist(VADeaths, col = heat.colors(n=2), main = "col=heat.colors")
hist(VADeaths, col = terrain.colors(n=2), main = "col=terrain.colors")
hist(VADeaths, col = rainbow(n=5), main = "col=rainbow")
hist(VADeaths, col = cm.colors(n=4), main = "col=cm.colors")
VADeaths
windows()
par(bg = "White", mfrow = c(2,2))
hist(VADeaths, col ="green", main = "green plot")
hist(VADeaths, col = "red", main = "red plot")
hist(VADeaths, col = c("red","blue"), main = "red blue plot")
hist(VADeaths, col = c("blue","blue", "red"), main = "blue blue red plot")
rainbow(n, s=1, v = 1, start=0, end = max(1,heat.colors(n,alpha = 1)))
terrain.colors(n,alpha = 1)
topo.colors(n, alpha = 1)
cm.colors(n, alpha = 1)
data()
#install.packages("RColorBrewer")
library(RColorBrewer)
window()
par(bg= "white", mfrow= c(2,2))
hist(VADeaths, col = brewer.pal(3, "Set3"), main = "Set 3 Colors")
hist(VADeaths, col = brewer.pal(3, "Set1"), main = "Set 3 Colors")
hist(VADeaths, col = brewer.pal(3, "Set2"), main = "Set 3 Colors")
hist(VADeaths, col = brewer.pal(8, "Greens"), main = "Greens 8 Colors")
display.brewer.all()
#install.packages("hexbin")
library(hexbin)
window()
plot(hexbin(iris$Petal.Length, iris$Sepal.Length), xlab = "Petal Length", ylab = "Sepal Length")
plot(iris$Petal.Length, iris$Sepal.Length)
#install.packages("vcd")
library(vcd)
window()
mosaic(HairEyeColor)
HairEyeColor
heatmap(as.matrix(mtcars))
View(mtcars)
#install.packages("tabplot")
library(tabplot)
window()
tableplot(dat = iris, numMode = "mb", pals = list(rainbow(n=3)))
tableplot(dat = iris, numMode = "mb", pals = list(c("green", "blue","pink")))
tableplot(dat = iris, sortCol= Sepal.Width,numMode = "mb", pals = list(rainbow(n=3)))
#install.packages("ggplot2")
library(ggplot2)
data(diamonds)
library(tabplot)
window()
tableplot(diamonds, sortCol = price, numMode = "mb")
tableplot(dat = iris, sortCol = Sepal.Width, numMode = "mb", pals = list(rainbow(n=3)))
#install.packages("ggplot2")
library(ggplot2)
data(diamonds)
library(tabplot)
window()
tableplot(diamonds, sortCol = price, numMode = "mb")
mpg_boxplot= boxplot(mtcars$mpg, main="Cars Mileage Data", ylab= "Miles per Gallon")
t=c(-100,1,2,3,4,5,6,7,8,9,155)
boxplot(t)
mpg_boxplot$stats
#install.packages("plotrix")
library(plotrix)
pie3D(x=table(iris$Species), labels = levels(iris$Species), col = c("red", "green", "blue"))
pie3D(x=table(iris$Species), labels = levels(iris$Species), col = c("red", "green", "blue"), explode= 0.1)
par(mfrow = c(1,2))
plot(mtcars$cyl, mtcars$wt, main = "Cyl vs. Weight", xlab = "Cyl", ylab = "Weight")
plot(mtcars$cyl, mtcars$wt, main = "Cyl vs. MPG", xlab = "Cyl", ylab = "Miles per Gallon")
par(mfrow = c(1,1))
par(bg = "light blue")
hist(iris$Sepal.Width)
hist(iris$Sepal.Width, col = "red")
VADeaths
windows()
par(bg = "White", mfrow = c(2,2))
hist(VADeaths, col = heat.colors(n=2), main = "col=heat.colors")
hist(VADeaths, col = terrain.colors(n=2), main = "col=terrain.colors")
hist(VADeaths, col = rainbow(n=5), main = "col=rainbow")
hist(VADeaths, col = cm.colors(n=4), main = "col=cm.colors")
VADeaths
windows()
par(bg = "White", mfrow = c(2,2))
hist(VADeaths, col ="green", main = "green plot")
hist(VADeaths, col = "red", main = "red plot")
hist(VADeaths, col = c("red","blue"), main = "red blue plot")
hist(VADeaths, col = c("blue","blue", "red"), main = "blue blue red plot")
#rainbow(n, s=1, v = 1, start=0, end = max(1,heat.colors(n,alpha = 1)))
#terrain.colors(n,alpha = 1)
#topo.colors(n, alpha = 1)
#cm.colors(n, alpha = 1)
data()
#install.packages("RColorBrewer")
library(RColorBrewer)
window()
par(bg= "white", mfrow= c(2,2))
hist(VADeaths, col = brewer.pal(3, "Set3"), main = "Set 3 Colors")
hist(VADeaths, col = brewer.pal(3, "Set1"), main = "Set 3 Colors")
hist(VADeaths, col = brewer.pal(3, "Set2"), main = "Set 3 Colors")
hist(VADeaths, col = brewer.pal(8, "Greens"), main = "Greens 8 Colors")
display.brewer.all()
#install.packages("hexbin")
library(hexbin)
window()
plot(hexbin(iris$Petal.Length, iris$Sepal.Length), xlab = "Petal Length", ylab = "Sepal Length")
plot(iris$Petal.Length, iris$Sepal.Length)
#install.packages("vcd")
library(vcd)
window()
mosaic(HairEyeColor)
HairEyeColor
heatmap(as.matrix(mtcars))
View(mtcars)
#install.packages("tabplot")
library(tabplot)
window()
tableplot(dat = iris, numMode = "mb", pals = list(rainbow(n=3)))
tableplot(dat = iris, numMode = "mb", pals = list(c("green", "blue","pink")))
tableplot(dat = iris, sortCol= Sepal.Width,numMode = "mb", pals = list(rainbow(n=3)))
#install.packages("ggplot2")
library(ggplot2)
data(diamonds)
library(tabplot)
window()
tableplot(diamonds, sortCol = price, numMode = "mb")
tableplot(dat = iris, sortCol = Sepal.Width, numMode = "mb", pals = list(rainbow(n=3)))
#install.packages("ggplot2")
library(ggplot2)
data(diamonds)
library(tabplot)
window()
tableplot(diamonds, sortCol = price, numMode = "mb")
mpg_boxplot= boxplot(mtcars$mpg, main="Cars Mileage Data", ylab= "Miles per Gallon")
t=c(-100,1,2,3,4,5,6,7,8,9,155)
boxplot(t)
mpg_boxplot$stats
library(tabplot)
colnames(HousingTrainData)
setwd("C:/Users/magic/Desktop/Sem2/R/CA 12-03")
Housing_Data = read.csv(file = "train.csv")
View(Housing_Data)
nrow(Housing_Data)
set.seed(777)
Rownumbers = sample(1:nrow(Housing_Data), 0.7*nrow(Housing_Data))
head(Rownumbers)
HousingTrainData = Housing_Data[Rownumbers,]
HousingTestData = Housing_Data[-Rownumbers,]
nrow(HousingTestData)
nrow()
colnames(HousingTrainData)
regressor = lm(formula = SalePrice~., data = HousingTrainData)
regressor = lm(formula = SalePrice~., data = HousingTrainData)
regressor = lm(formula = Fireplaces~YrSold, data = HousingTrainData)
ggplot()+geom_point(aes(x=HousingTrainData$LotArea, y=HousingTrainData$SalePrice), colour = 'red')
library(ggplot2)
ggplot()+geom_point(aes(x=HousingTrainData$LotArea, y=HousingTrainData$SalePrice), colour = 'red')
data(Boston,package = "MASS")
names(Boston)
str(Boston)
head(Boston)
summary(Boston)
reg_Model = lm(formula = medv~., data = Boston)
summary(reg_Model)
vif(reg_Model)
vif(reg_Model)
plot(reg_Model$fitted.values, reg_Model$residuals, xlab='Prediction', ylab = 'Errors')
abline(a=0,b=0)
#Linear Regression on Boston Housing data.
data(Boston,package = "MASS")
View(Boston)
nrow(Boston)
set.seed(777)
Rownumbers = sample(1:nrow(Boston), 0.7*nrow(Boston))
head(Rownumbers)
HousingTrainData = Boston[Rownumbers,]
HousingTestData = Boston[-Rownumbers,]
nrow(HousingTestData)
nrow()
names(Boston)
str(Boston)
head(Boston)
summary(Boston)
reg_Model = lm(formula = medv~., data = Boston)
summary(reg_Model)
plot(reg_Model$fitted.values, reg_Model$residuals, xlab='Prediction', ylab = 'Errors')
abline(a=0,b=0)
nrow()
nrow(HousingTestData)
colnames(HousingTrainData)
Housing_Data = read.csv(file = "train.csv")
View(Housing_Data)
nrow(Housing_Data)
set.seed(777)
Rownumbers = sample(1:nrow(Housing_Data), 0.7*nrow(Housing_Data))
head(Rownumbers)
TrainData = Housing_Data[Rownumbers,]
TestData = Housing_Data[-Rownumbers,]
colnames(HousingTrainData)
colnames(TrainData)
regressor = lm(formula = SalePrice~., data = TrainData)
#Linear Regression on Boston Housing data.
data(Boston,package = "MASS")
View(Boston)
nrow(Boston)
set.seed(777)
Rownumbers = sample(1:nrow(Boston), 0.7*nrow(Boston))
head(Rownumbers)
HousingTrainData = Boston[Rownumbers,]
HousingTestData = Boston[-Rownumbers,]
nrow(HousingTestData)
names(Boston)
str(Boston)
head(Boston)
summary(Boston)
reg_Model = lm(formula = medv~., data = Boston)
summary(reg_Model)
plot(reg_Model$fitted.values, reg_Model$residuals, xlab='Prediction', ylab = 'Errors')
abline(a=0,b=0)
head(Boston)
setwd("C/Users/magic/Desktop/Sem2/R/Asgn/proj/Logistic_Regression")
setwd("C/Users/magic/Desktop/Sem2/R/Asgn/proj/Logistic_Regression")
setwd("C/Users/magic/Desktop/Sem2/R/Asgn/proj")
setwd("C:/Users/magic/Desktop/Sem2/R/CA 12-03")
setwd("C:/Users/magic/Desktop/Sem2/R/Asgn/proj/Logistic_Regression")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
prob_pred = predict(classifier, type = 'response', newdata = test_set[-3])
y_pred = ifelse(prob_pred > 0.5, 1, 0)
cm = table(test_set[, 3], y_pred > 0.5)
install.packages('ElemStatLearn')
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Visualising the Test set results
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
setwd("C:/Users/magic/Desktop/Sem2/R/Asgn/proj/Logistic_Regression")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
set.seed(777)
splitdata = sample(1:nrow(dataset), 0.7*nrow(dataset))
View(Housing_Data)
Train_1 = dataset[splitdata,]
Test_1 = dataset[-splitdata,]
classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
